import numpy as np
import random

def verifyConstraint(A, B, C, w):
	result = np.multiply(A.dot(w), B.dot(w)) == C.dot(w)
	return result.all()  

x = random.randint(1,1000)
y = 2 # satisfies conditions for y == 0 or 1 or 2

o = .5 * x * y**2 - 1.5 * x * y + x - x**2 * y**2 + 2 * x**2 * y + .5 * x**3 * y**2 - .5 * x**3 * y
v1 = x**2
v2 = y**2
v3 = x * y
v4 = v1 * v2
v5 = .5 * v2 * x
v6 = .5 * v4 * x
v7 = .5 * v1 * v3

w = [ 1,  o,  x,  y, v1, v2, v3, v4, v5, v6, v7 ]

A = np.array([
	[0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],
	[0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0],
  [0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],
	[0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0],
  [0,  0,  0,  0,  0, .5,  0,  0,  0,  0,  0],
	[0,  0,  0,  0,  0,  0,  0, .5,  0,  0,  0],
  [0,  0,  0,  0, .5,  0,  0,  0,  0,  0,  0],
	[0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0],
	[0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0],
])

B = np.array([
	[0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],
	[0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0],
  [0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0],
	[0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0],
  [0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],
	[0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0],
  [0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0],
	[0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0],
	[0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0],
])

C = np.array([[0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0],
							[0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0],
              [0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0],
							[0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0],
              [0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0],
							[0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0],
              [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1],
							[0,  0,  0, -2,  0,  3,  0,  0,  0,  0,  0],
							[0,  1, -1,  0,  0,  0, 1.5, 1, -1, -1,  1],])

print(verifyConstraint(A,B,C,w))

# Compute and verify R1CS for the following:
# fn main(x: field, y: field) -> field {
#   assert!(y == 0 || y == 1 || y == 2);
#   if (y == 0) {
# 		return x; 
# 	}
# 	else if (y == 1) {
# 	  return x**2;
# 	} 
# 	else {
# 	  return x**3;
# 	}
# }

# assertion
# y(y-1)(y-2) = 0
# y(y^2 - 3y + 2)
# y^3 - 3y^2 + 2y = 0  // append as rows to matrix
# v2(y) - 3(v2) +2y = 0
# -2y + 3(v2) = v2(y) 

# if/elseif/else
# out = x(y-2)(y-1)(a) + x^2(y)(y-2)(b) + x^3(y)(y-1)(c) 

# adjust term constants to return expected output
# P(x,0) = 2x(a),   for a = .5 P(x,0) = x         
# P(x,1) = -x^2(b), for b = -1 P(x,1) = x^2         
# P(x,2) = 2x^3(c), for c = .5 P(x,2) = x^3 

# out = x(y-2)(y-1)(.5) + x^2(y)(y-2)(-1) + x^3(y)(y-1)(.5) 

#  (xy - 2x)(y-1)(.5) 
#  (xy^2 - xy - 2xy + 2x)(.5)
#  (.5)xy^2 - (1.5)xy + x

#  x^2(y)(y-2)(-1)
# x^2(y^2 - 2y)(-1)
# - (x^2)(y^2) + 2(x^2)y

# x^3(y)(y-1)(.5) 
# x^3(y^2 - y)(.5)
# .5(x^3)(y^2) - .5(x^3)(y)

# expanded polynomial & constraint derivation
# out = (.5)xy^2 - (1.5)xy + x - (x^2)(y^2) + 2(x^2)y + .5(x^3)(y^2) - .5(x^3)(y)

# out = (.5)xy^2  - (1.5)xy + x - v1(y^2) + 2v1y  + .5(v1)(x)(y^2) - .5(v1)(x)(y)
# out = (.5)x(v2) - (1.5)xy + x - v1(v2)  + 2v1y  + .5(v1)(x)(v2)  - .5(v1)(x)(y)
# out = (.5)x(v2) - (1.5)v3 + x - v1(v2)  + 2v1y  + .5(v1)(x)(v2)  - .5(v1)(v3)
# out = (.5)x(v2) - (1.5)v3 + x - v4      + 2v1y  + .5(v4)(x)      - .5(v1)(v3)
# out = v5        - (1.5)v3 + x - v4      + 2v1y  + .5(v4)(x)      - .5(v1)(v3)
# out = v5        - (1.5)v3 + x - v4      + 2v1y  + v6             - .5(v1)(v3)
# out = v5        - (1.5)v3 + x - v4      + 2v1y  + v6             - v7

# final contraints, witness, and matrices
# O                                         LHS  RHS
# v1                                   =      x *  x
# v2                                   =      y *  y
# v3                                   =      x *  y
# v4                                   =     v1 * v2
# v5                                   = (.5)v2 *  x
# v6                                   = (.5)v4 *  x
# v7                                   = (.5)v1 * v3
# -2y + 3(v2)                          =     v2 *  y 
# out - x + (1.5)v3 + v4 - v5 - v6 + v7 =   2v1 *  y

# w = [ 1, o, x, y, v1, v2, v3, v4, v5, v6, v7 ]

# LHS
# 1  o  x  y v1 v2 v3 v4 v5 v6 v7
# 0  0  1  0  0  0  0  0  0  0  0
# 0  0  0  1  0  0  0  0  0  0  0  
# 0  0  1  0  0  0  0  0  0  0  0
# 0  0  0  0  1  0  0  0  0  0  0   
# 0  0  0  0  0 .5  0  0  0  0  0     
# 0  0  0  0  0  0  0 .5  0  0  0 
# 0  0  0  0 .5  0  0  0  0  0  0   
# 0  0  0  0  0  1  0  0  0  0  0     
# 0  0  0  0  2  0  0  0  0  0  0     

# RHS
# 1  o  x  y v1 v2 v3 v4 v5 v6 v7
# 0  0  1  0  0  0  0  0  0  0  0
# 0  0  0  1  0  0  0  0  0  0  0  
# 0  0  0  1  0  0  0  0  0  0  0
# 0  0  0  0  0  1  0  0  0  0  0   
# 0  0  1  0  0  0  0  0  0  0  0
# 0  0  1  0  0  0  0  0  0  0  0
# 0  0  0  0  0  0  1  0  0  0  0   
# 0  0  0  1  0  0  0  0  0  0  0     
# 0  0  0  1  0  0  0  0  0  0  0  

# O
# 1  o  x  y v1 v2 v3 v4 v5 v6 v7
# 0  0  0  0  1  0  0  0  0  0  0
# 0  0  0  0  0  1  0  0  0  0  0  
# 0  0  0  0  0  0  1  0  0  0  0    
# 0  0  0  0  0  0  0  1  0  0  0  
# 0  0  0  0  0  0  0  0  1  0  0  
# 0  0  0  0  0  0  0  0  0  1  0  
# 0  0  0  0  0  0  0  0  0  0  1
# 0  0  0 -2  0  3  0  0  0  0  0     
# 0  1 -1  0  0  0 1.5 1 -1 -1  1
